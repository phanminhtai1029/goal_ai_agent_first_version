# File: main.py (Phi√™n b·∫£n cu·ªëi c√πng - S·ª≠a l·ªói Event Loop)

import functions_framework
import telegram
import os
import logging
from flask import Request
import datetime
import asyncio

# Langchain
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_core.prompts import ChatPromptTemplate
from langchain_google_vertexai import ChatVertexAI

# Utils v√† Tools
from utils.security import check_rate_limit, log_message, log_security_event
from utils.secrets import get_secret, PROJECT_ID

# === KH·ªûI T·∫†O L∆Ø·ªúI (AGENT) ===
_agent_executor = None
_my_telegram_id = None
_webhook_secret = None
# S·ª¨A L·ªñI: X√≥a _bot kh·ªèi ƒë√¢y

def get_agent_and_secrets():
    """
    H√†m n√†y ch·ªâ kh·ªüi t·∫°o Agent v√† t·∫£i Secrets.
    Bot s·∫Ω ƒë∆∞·ª£c t·∫°o ri√™ng.
    """
    global _agent_executor, _my_telegram_id, _webhook_secret
    
    # N·∫øu ƒë√£ kh·ªüi t·∫°o, tr·∫£ v·ªÅ ngay l·∫≠p t·ª©c
    if _agent_executor:
        return _agent_executor, _my_telegram_id, _webhook_secret

    logging.info("ƒêang th·ª±c hi·ªán kh·ªüi t·∫°o Agent (cold start)...")
    
    MY_TELEGRAM_ID = get_secret("MY_TELEGRAM_ID")
    WEBHOOK_SECRET = get_secret("WEBHOOK_SECRET")

    if not MY_TELEGRAM_ID or not WEBHOOK_SECRET:
         raise ValueError("Kh√¥ng th·ªÉ t·∫£i MY_TELEGRAM_ID ho·∫∑c WEBHOOK_SECRET.")

    _my_telegram_id = MY_TELEGRAM_ID
    _webhook_secret = WEBHOOK_SECRET

    llm = ChatVertexAI(
        model_name="gemini-2.5-flash",
        location="asia-southeast1"
    )

    from tools.calendar_tool import add_calendar_event, list_calendar_events
    from tools.rag_tool import add_to_rag, ask_rag
    from tools.admin_tool import trigger_manual_cleanup, get_system_status

    tools = [
        add_calendar_event, list_calendar_events, add_to_rag,
        ask_rag, trigger_manual_cleanup, get_system_status
    ]

    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", (
                "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI c√° nh√¢n th√¥ng minh v√† b·∫£o m·∫≠t, t√™n l√† 'GCP-Assistant'.\n"
                "B·∫°n ch·ªâ n√≥i chuy·ªán v·ªõi ch·ªß nh√¢n c·ªßa m√¨nh (admin).\n"
                "Nhi·ªám v·ª• c·ªßa b·∫°n l√† gi√∫p admin qu·∫£n l√Ω l·ªãch (Google Calendar), "
                "tra c·ª©u th√¥ng tin ƒë√£ l∆∞u (RAG), v√† qu·∫£n l√Ω h·ªá th·ªëng.\n"
                "B·∫°n PH·∫¢I s·ª≠ d·ª•ng c√°c c√¥ng c·ª• (tools) ƒë∆∞·ª£c cung c·∫•p khi c√≥ y√™u c·∫ßu."
                "Khi s·ª≠ d·ª•ng tool 'add_calendar_event' ho·∫∑c 'list_calendar_events', "
                "b·∫°n ph·∫£i suy lu·∫≠n ra th·ªùi gian `start_time_str` v√† `end_time_str` "
                "·ªü ƒë·ªãnh d·∫°ng ISO 8601 (v√≠ d·ª•: 2025-10-28T09:00:00+07:00) "
                "d·ª±a tr√™n tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng (v√≠ d·ª•: 'ng√†y mai', '8h s√°ng')."
                "Th·ªùi gian hi·ªán t·∫°i l√†: {current_time}"
            )),
            ("human", "{input}"),
            ("placeholder", "{agent_scratchpad}"),
        ]
    )

    agent = create_tool_calling_agent(llm, tools, prompt)
    _agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)
    
    logging.info("...Kh·ªüi t·∫°o Agent ho√†n t·∫•t.")
    
    return _agent_executor, _my_telegram_id, _webhook_secret

# === H√ÄM G·ª¨I TIN NH·∫ÆN (ASYNC) M·ªöI ===
async def send_telegram_message(chat_id: int, text: str):
    """
    T·∫°o Bot object m·ªõi v√† g·ª≠i tin nh·∫Øn.
    ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o kh√¥ng d√πng l·∫°i client t·ª´ event loop ƒë√£ ƒë√≥ng.
    """
    bot_token = get_secret("BOT_TOKEN")
    if not bot_token:
        logging.error("‚ùå Kh√¥ng th·ªÉ l·∫•y BOT_TOKEN ƒë·ªÉ g·ª≠i tin nh·∫Øn.")
        return

    bot = telegram.Bot(token=bot_token)
    try:
        await bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi g·ª≠i tin nh·∫Øn: {e}")
    finally:
        # Quan tr·ªçng: ƒê√≥ng client sau khi g·ª≠i
        await bot.shutdown()


@functions_framework.http
def telegram_webhook(request: Request): # <--- Gi·ªØ h√†m n√†y l√† ƒê·ªíNG B·ªò (def)
    """HTTP Cloud Function ƒë·ªÉ nh·∫≠n webhook t·ª´ Telegram."""

    try:
        agent_executor, MY_TELEGRAM_ID, WEBHOOK_SECRET = get_agent_and_secrets()
    except Exception as e:
        logging.error(f"‚ùå L·ªñI KH·ªûI T·∫†O NGHI√äM TR·ªåNG: {e}")
        return ("OK", 200)

    token = request.args.get("token")
    if token != WEBHOOK_SECRET:
        logging.warning("‚ö†Ô∏è L·ªói x√°c th·ª±c Webhook! Token kh√¥ng h·ª£p l·ªá.")
        return ("OK", 200)

    try:
        # S·ª¨A L·ªñI: Kh√¥ng c·∫ßn `bot` ·ªü ƒë√¢y ƒë·ªÉ parse
        update_json = request.get_json(force=True)
        if not update_json.get("message") or not update_json["message"].get("text"):
            return ("OK", 200)
        
        user_id = str(update_json["message"]["from"]["id"])
        chat_id = update_json["message"]["chat"]["id"]
        message_text = update_json["message"]["text"]

        if user_id != MY_TELEGRAM_ID:
            logging.warning(f"‚ö†Ô∏è Truy c·∫≠p tr√°i ph√©p t·ª´ ID: {user_id}")
            log_security_event(user_id, "unauthorized_access")
            return ("OK", 200)

        if not check_rate_limit(user_id):
            logging.warning(f"‚ö†Ô∏è Rate limit cho admin: {user_id}")
            asyncio.run(send_telegram_message(chat_id, "B·∫°n thao t√°c qu√° nhanh, vui l√≤ng th·ª≠ l·∫°i sau 1 gi·ªù."))
            return ("OK", 200)

        log_message(user_id, message_text)
        logging.info(f"ƒêang x·ª≠ l√Ω tin nh·∫Øn: {message_text}")

        current_time = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=7))).isoformat()
        
        response = agent_executor.invoke({
            "input": message_text,
            "current_time": current_time
        })
        response_text = response.get("output", "ƒê√£ c√≥ l·ªói x·∫£y ra, kh√¥ng c√≥ output.")

        # S·ª¨A L·ªñI: G·ªçi h√†m helper m·ªõi
        asyncio.run(send_telegram_message(chat_id, response_text))
        return ("OK", 200)

    except Exception as e:
        logging.error(f"‚ùå L·ªói nghi√™m tr·ªçng trong function: {e}")
        try:
            # S·ª¨A L·ªñI: G·ªçi h√†m helper m·ªõi
            asyncio.run(send_telegram_message(int(MY_TELEGRAM_ID), f"Bot g·∫∑p l·ªói: {e}"))
        except Exception:
            pass
        return ("OK", 200)

# === PH·∫¶N CODE CHO CLEANUP FUNCTION (Gi·ªØ nguy√™n) ===
@functions_framework.cloud_event
def cleanup_exports(cloud_event):
    # ... (Code h√†m n√†y gi·ªØ nguy√™n) ...
    logging.info("üßπ B·∫Øt ƒë·∫ßu job d·ªçn d·∫πp file export...")
    try:
        from google.cloud import storage
        from datetime import datetime, timedelta, timezone
        storage_client = storage.Client()
        bucket_name = "ai-assistant-exports-kource-123" # <--- S·ª¨A T√äN BUCKET C·ª¶A B·∫†N
        bucket = storage_client.get_bucket(bucket_name)
        seven_days_ago = datetime.utcnow().replace(tzinfo=timezone.utc) - timedelta(days=7)
        blobs = bucket.list_blobs()
        deleted_count = 0
        for blob in blobs:
            if blob.time_created < seven_days_ago:
                logging.info(f"ƒêang x√≥a file: {blob.name} (Ng√†y t·∫°o: {blob.time_created})")
                blob.delete()
                deleted_count += 1
        logging.info(f"‚úÖ D·ªçn d·∫πp th√†nh c√¥ng. ƒê√£ x√≥a {deleted_count} file.")
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi d·ªçn d·∫πp: {e}")